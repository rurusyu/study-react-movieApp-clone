{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","potato","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA+DA,SAASA,EAATC,GAAkC,IAAZC,EAAYD,EAAZC,OAAOC,EAAKF,EAALE,IAC3B,OACAC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAW,kBAKrD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACnB,OACER,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,EAAhC,KAoBWC,MAvDf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACrC,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAW,SACdL,EAAAC,EAAAC,cAAA,OAAKG,UAAY,iBACjBL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAElCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAY,iBACfL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAW,iBACbM,EAAOE,IAAI,SAACL,EAAMM,GAAP,OAAiBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAASA,EAAOO,IAAKD,OAEhEd,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBACbL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCIHC,6MAnDbC,MAAQ,KAWRC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GAEnC,OADAC,QAAQC,IAAIF,GACL3B,EAAAC,EAAAC,cAAC4B,EAAD,CACP1B,MAAOuB,EAAMvB,MACbN,OAAQ6B,EAAMI,mBACdhB,IAAKY,EAAMK,GACXrB,OAAUgB,EAAMhB,OAChBC,SAAYe,EAAMf,gBAMtBqB,gCAAa,SAAAC,IAAA,IAAAR,EAAA,OAAAS,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUd,EAAKe,WADf,OACLd,EADKW,EAAAI,KAEXhB,EAAKiB,SAAS,CACZhB,WAHS,wBAAAW,EAAAM,SAAAT,QAObM,SAAW,WAER,OAAOI,MAAM,yDACZC,KAAK,SAAAC,GAAM,OAAGA,EAAOC,SACrBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAItB,QAAQC,IAAIqB,yFA9B3BC,KAAKlB,8CAiCE,IACAP,EAAUyB,KAAK5B,MAAfG,OACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAE9BA,EAASyB,KAAK3B,gBAAkB,iBA9CvB4B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.a7424cdd.chunk.js","sourcesContent":["import React  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\n// //smart한방법. \r\n// class Movie extends Component {\r\n//     //부모로 부터 받아오는 데이터 타입일치하는지 확인.\r\n//     static propTypes ={\r\n//       title : PropTypes.string.isRequired,\r\n//       poster : PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render() {\r\n//       return (\r\n//         <div>\r\n//           <MoviePoster poster={this.props.poster}/>\r\n//           <h1>{this.props.title}</h1>\r\n//         </div>\r\n//       );\r\n//     }\r\n// }\r\n\r\n// class MoviePoster extends Component {\r\n//   static propTypes ={\r\n//     poster : PropTypes.string.isRequired\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//        <img src={this.props.poster} alt=\"Movie Poster\" />\r\n//       );\r\n//     }\r\n//   }\r\n\r\n//dumb 방법 : return으로 html만 가져온다.\r\n//html을 여기서 다루니, 디자인을 여기서 해주면 됨. \r\nfunction Movie({title, poster, genres, synopsis}){\r\n  return (\r\n    <div className =\"Movie\">\r\n      <div className = \"Movie__Column\">\r\n      <MoviePoster poster={poster} alt={title}/>\r\n      </div>      \r\n      <div className = \"Movie__Column\">\r\n        <h1>{title}</h1>\r\n        <div className =\"Movie__Genres\">\r\n          {genres.map((genre,index) => <MovieGenre genre = {genre} key={index}/>)}\r\n        </div>\r\n        <p className=\"Movie__Synopsis\">\r\n        <LinesEllipsis\r\n          text={synopsis}\r\n          maxLine='3'\r\n          ellipsis='...'\r\n          trimRight\r\n          basedOn='letters'\r\n          />   \r\n        </p>\r\n      </div> \r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nfunction MoviePoster({poster,alt}){\r\n  return ( //alt 는 이미지 설명하는 것. 이미지 위에 마우스 갖다대면 설명뜸.\r\n  <img src={poster} alt={alt} title={alt} className =\"Movie__Poster\"/>\r\n  )\r\n}\r\n\r\n//장르부분 없어서 컴포넌트로 만들어주는 것.\r\nfunction MovieGenre({genre}){\r\n  return (\r\n    <span className=\"Movie__Genre\">{genre} </span>\r\n  )\r\n}\r\n\r\nMovie.propTypes={\r\n  title : PropTypes.string.isRequired,\r\n  poster : PropTypes.string.isRequired,\r\n  genres : PropTypes.array.isRequired,\r\n  synopsis : PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n  poster : PropTypes.string.isRequired,\r\n  alt : PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes={\r\n  genre:PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\n\n\nclass App extends Component {\n  state = {\n   \n   \n  };\n\n  componentDidMount() {\n    // 컴포넌트 생성 라이프사이클에서는 didmount가 render 후에 발생하므로, 랜더 후 변동사항 발생할 만한 것은 여기다 작성해주면 됨.\n    this._getMovies();\n  }\n  //데이터 없을때 로딩띄우고 있으면 영화정보가 보이도록 예정.\n  //언더스코어 쓰는이유는 리액트는 자체기능이 많기 때문에, 자체기능과 내 기능에 차이를 두기 위함임. 나의 기능은 언더스코어로.\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie =>{\n      console.log(movie);\n      return <Movie \n      title={movie.title} \n      poster={movie.medium_cover_image} \n      key={movie.id} //index보다 id로 가져오는 것이 더 빠름.\n      genres = {movie.genres}\n      synopsis = {movie.synopsis}\n      /> \n    });\n    return movies;\n  }\n\n  _getMovies = async() =>{\n    const movies = await this._callApi();\n    this.setState({ //callApi가 되기 전까지는 이부분은 실행되지 않음.\n      movies\n    })\n  }\n\n  _callApi = () => {\n     // 이것도 프로미스 패턴.\n     return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n     .then(potato =>potato.json())  //위에서 통과하면 then에 나타남.\n     .then(json => json.data.movies)\n     .catch(err => console.log(err)) //try~catch개념\n  }\n\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>             \n      {/* 리액트에서 로딩은 이런식으로 체크하고 로딩. */}\n        {movies ? this._renderMovies() : 'Loding'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}